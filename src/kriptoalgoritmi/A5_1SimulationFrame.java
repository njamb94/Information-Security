/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kriptoalgoritmi;

import javax.swing.JOptionPane;

/**
 *
 * @author njamb94
 */
public class A5_1SimulationFrame extends javax.swing.JFrame {

    private a5_1Cryption cryptObj;
    private String key;
    private char[] keyAsChars;
    private int currentDataCaret;
    private int inputBitsCaret;
    /**
     * Creates new form NewJFrame
     */
    public A5_1SimulationFrame() {
        initComponents();
        
        outputBitsTextArea.setEnabled(false);
        smallRegTextField.setEnabled(false);
        smallRegBitTextField.setEnabled(false);
        middleRegTextField.setEnabled(false);
        middleRegBitTextField.setEnabled(false);
        bigRegTextField.setEnabled(false);
        bigRegBitTextField.setEnabled(false);
        majorityVoteTextField.setEnabled(false);
        currentDataTextField.setEnabled(false);
        startBtn.setEnabled(false);
        
        currentDataCaret = 0;
        inputBitsCaret = 0;
        key = "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        smallRegTextField = new javax.swing.JTextField();
        middleRegTextField = new javax.swing.JTextField();
        bigRegTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        currentDataTextField = new javax.swing.JTextField();
        bigRegBitTextField = new javax.swing.JTextField();
        middleRegBitTextField = new javax.swing.JTextField();
        smallRegBitTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        majorityVoteTextField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        simulationKeyTextField = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputBitsTextArea = new javax.swing.JTextArea();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputBitsTextArea = new javax.swing.JTextArea();
        startBtn = new javax.swing.JButton();
        stopBtn = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Simulation"));

        smallRegTextField.setMinimumSize(new java.awt.Dimension(147, 24));

        middleRegTextField.setMinimumSize(new java.awt.Dimension(168, 24));

        bigRegTextField.setMinimumSize(new java.awt.Dimension(175, 24));

        jLabel6.setText("0");

        jLabel7.setText("18");

        jLabel8.setText("0");

        jLabel9.setText("21");

        jLabel10.setText("0");

        jLabel11.setText("22");

        jLabel15.setText("Current data being encrypted:");

        currentDataTextField.setMinimumSize(new java.awt.Dimension(70, 24));

        bigRegBitTextField.setMinimumSize(new java.awt.Dimension(21, 24));

        middleRegBitTextField.setMinimumSize(new java.awt.Dimension(21, 24));

        smallRegBitTextField.setMinimumSize(new java.awt.Dimension(21, 24));

        jLabel12.setText("10th bit");

        jLabel13.setText("8th bit");

        jLabel14.setText("10th bit");

        jLabel16.setText("Key divided in 3 registers:");

        jLabel17.setText("Majority vote");

        majorityVoteTextField.setMinimumSize(new java.awt.Dimension(21, 24));

        jLabel18.setText("Enter key:");

        simulationKeyTextField.setMinimumSize(new java.awt.Dimension(462, 24));
        simulationKeyTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                simulationKeyTextFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                simulationKeyTextFieldKeyReleased(evt);
            }
        });

        jLabel19.setText("0");

        jLabel20.setText("63");

        jLabel21.setText("Input bits:");

        inputBitsTextArea.setColumns(20);
        inputBitsTextArea.setRows(5);
        inputBitsTextArea.setMinimumSize(new java.awt.Dimension(462, 16));
        inputBitsTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputBitsTextAreaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputBitsTextAreaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(inputBitsTextArea);

        jLabel22.setText("Output bits:");

        outputBitsTextArea.setColumns(20);
        outputBitsTextArea.setRows(5);
        outputBitsTextArea.setMinimumSize(new java.awt.Dimension(462, 16));
        jScrollPane2.setViewportView(outputBitsTextArea);

        startBtn.setText("Start");
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        stopBtn.setText("Stop");
        stopBtn.setToolTipText("");
        stopBtn.setEnabled(false);
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });

        jLabel23.setForeground(new java.awt.Color(153, 153, 153));
        jLabel23.setText("Developed by Njamb");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addGap(52, 52, 52))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(154, 154, 154)
                                        .addComponent(jLabel11))
                                    .addComponent(bigRegTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(middleRegTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel8)
                                            .addGap(147, 147, 147)
                                            .addComponent(jLabel9)))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(smallRegTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel6)
                                            .addGap(126, 126, 126)
                                            .addComponent(jLabel7))))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel13)
                                            .addComponent(smallRegBitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel17)
                                            .addComponent(majorityVoteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel15))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(middleRegBitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel12))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(bigRegBitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(currentDataTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel20))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1)
                                    .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(stopBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startBtn)))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(simulationKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(simulationKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel13)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(smallRegTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(smallRegBitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(majorityVoteTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(middleRegTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(middleRegBitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bigRegTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bigRegBitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(currentDataTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(startBtn)
                        .addComponent(stopBtn))
                    .addComponent(jLabel23, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // After each typed value in the Key textfield, we look if the user has
    // entered irregular values (e.i. something other than 0s and 1s):
    private void simulationKeyTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_simulationKeyTextFieldKeyReleased
        
        if (!simulationKeyTextField.getText().isEmpty()) {
            if (simulationKeyTextField.getText()
                .charAt(simulationKeyTextField.getText().length()-1) != '1' 
                    && simulationKeyTextField.getText()
                            .charAt(simulationKeyTextField
                                    .getText().length()-1) != '0')
            {
                JOptionPane.showMessageDialog(null,
                        "You're trying to enter something other than '1' or '0'."
                            + " Please try again using only '1's and '0's.", 
                        "You've done goofed!", JOptionPane.INFORMATION_MESSAGE);
                
                simulationKeyTextField.setText("");
            }
            else {
                key = simulationKeyTextField.getText();
            }
        }
    }//GEN-LAST:event_simulationKeyTextFieldKeyReleased

    // On start button click, change it to 'next step' and initialize registers.
    // On each step go through the working byte and encrypt bit by bit on each
    // 'next step'.
    // After byte encryption, print it to output bits textArea, lock 
    // 'next step'/'start button:
    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
        if (key.length() != 64) {
            JOptionPane.showMessageDialog(null,
                        "Please enter array of 64 ones & zeros as a key.", 
                        "You've done goofed!", JOptionPane.INFORMATION_MESSAGE);
        }
        else 
            if (inputBitsTextArea.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null,
                            "Please enter input bits to be encrypted.", 
                            "You've done goofed!", 
                            JOptionPane.INFORMATION_MESSAGE);
            }
            else 
                if (inputBitsTextArea.getText().length() % 8 != 0) {
                    JOptionPane.showMessageDialog(null,
                            "Please enter the number of input bits devisible by "
                                    + "8 to be encrypted.\n"
                                    + "(e.g. 8bits-16bits-24bits-etc.)", 
                            "You've done goofed!", 
                            JOptionPane.INFORMATION_MESSAGE);
                }
                else {
                    if (currentDataCaret < inputBitsTextArea.getText().length()) {
                        // If we're just starting encryption:
                        if (startBtn.getText().equals("Start")) {
                            cryptObj = new a5_1Cryption(key);

                            inputBitsTextArea.setEnabled(false);
                            simulationKeyTextField.setEnabled(false);
                            startBtn.setText("Next step");
                            stopBtn.setEnabled(true);

                            currentDataCaret = 0;
                            inputBitsCaret = 0;
                            
                            setRegsAndBits();
                        }
                        // If we go step by step:
                        else {
                            // Read 'byte' of chars from the input bits and set it 
                            // to myByte var:
                            int myByte = inputBitsToByte();
                            // Set the byte that we're encrypting:
                            cryptObj.setByte(myByte);

                            // Encrypt and store the encrypted byte.
                            // only 1 bit tested and encrypted:
                            myByte = cryptObj.encryptByBits();
                            currentDataCaret++;

                            // Set the current state of the encrypting byte:
                            currentDataTextField.setText(intByteToString(myByte));
                            // Set all registers:
                            setRegsAndBits();
                        }
                    }
                    else {
                        startBtn.setText("Done!");
                        startBtn.setEnabled(false);
                        inputBitsCaret = 0;
                    }
                }
    }//GEN-LAST:event_startBtnActionPerformed

    // Method for reading values from our cryptObj and writing them in the 
    // correct textfields:
    private void setRegsAndBits() {
        smallRegTextField.setText(intArrayToString(cryptObj.getSmallReg()));
        middleRegTextField.setText(intArrayToString(cryptObj.getMidReg()));
        bigRegTextField.setText(intArrayToString(cryptObj.getBigReg()));
        
        int[] tmp = new int[3];
        tmp[0] = cryptObj.getSmallReg()[8];
        tmp[1] = cryptObj.getMidReg()[10];
        tmp[2] = cryptObj.getBigReg()[10];
        
        smallRegBitTextField.setText(String.valueOf(tmp[0]));
        middleRegBitTextField.setText(String.valueOf(tmp[1]));
        bigRegBitTextField.setText(String.valueOf(tmp[2]));
        
        majorityVoteTextField.setText(
                String.valueOf(cryptObj.getMajorityVote()));
        
        
        if (currentDataCaret % 8 == 0 && currentDataCaret != 0) {
            outputBitsTextArea.setText(outputBitsTextArea.getText()
                    .concat(currentDataTextField.getText()));
            if (inputBitsCaret < inputBitsTextArea.getText().length())
                currentDataTextField.setText(inputBitsTextArea.getText()
                        .substring(inputBitsCaret, inputBitsCaret + 8)); 
            inputBitsCaret += 8;
        }
        else {
            if (currentDataCaret == 0) {
                currentDataTextField.setText(inputBitsTextArea.getText()
                    .substring(inputBitsCaret, inputBitsCaret + 8));
                inputBitsCaret += 8;
            }
            //inputBitsCaret++;
        }
    }
    
    ////////////////////////////////////////////////////////////
    
    
    // TO-DO: input textarea: check for input (!= 0s & 1s)
    // TO-DO: Implement step by step encryption
    
    
    ////////////////////////////////////////////////////////////
    
    // Method that converts input bits to byte:
    private int inputBitsToByte() {
        String currentData = currentDataTextField.getText();
        int myByte = 0;
        
        for (int i = 0, k = 7; i < 8; i++, k--) {
            if (currentData.charAt(i) == '1')
                myByte |= (1 << k);
        }
        
        return myByte;
    }
    
    // Method that returns the the look of the byte as a String:
    private String intByteToString(int intByte) {
        char[] intHolder = new char[8];
        for (int i = 0; i < 8; i++)
            intHolder[i] = '0';
        
        int xorInt = 0x80;
        
        for (int i = 0; i < 8; i++) {
            if ((intByte & xorInt) == xorInt) {
                intHolder[i] = '1';
            }
            xorInt >>= 1;
        }
        
        return String.copyValueOf(intHolder);
    }
    
    // Method for converting array of integeres into single line String:
    private String intArrayToString(int[] array) {
        String tmp = "";
        for (int i = 0; i < array.length; i++) {
            tmp = tmp.concat(Integer.toString(array[i]));
        }
        return tmp;
    }
    
    // Method for clearing all textfields:
    private void clearTextFieldsRegsAndBits() {
        simulationKeyTextField.setText("");
        inputBitsTextArea.setText("");
        outputBitsTextArea.setText("");
        smallRegTextField.setText("");
        middleRegTextField.setText("");
        bigRegTextField.setText("");
        smallRegBitTextField.setText("");
        middleRegBitTextField.setText("");
        bigRegBitTextField.setText("");
        majorityVoteTextField.setText("");
        currentDataTextField.setText("");
    }
    
    // Limit the key textfield to 64 letters:
    private void simulationKeyTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_simulationKeyTextFieldKeyPressed
        if (simulationKeyTextField.getText().length() > 64) {
            String tmp = simulationKeyTextField.getText().substring(0, 64);
            simulationKeyTextField.setText(tmp);
        }
    }//GEN-LAST:event_simulationKeyTextFieldKeyPressed

    // When Stop button has been pressed: clear all textFields/Areas and return
    // the GUI in the initial state:
    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        clearTextFieldsRegsAndBits();
        startBtn.setText("Start");
        startBtn.setEnabled(true);
        simulationKeyTextField.setEnabled(true);
        inputBitsTextArea.setEnabled(true);
        stopBtn.setEnabled(false);
        currentDataCaret = 0;
        inputBitsCaret = 0;
    }//GEN-LAST:event_stopBtnActionPerformed

    // Method for checking if the text inputed is only made out of 0s and 1s:
    private void inputBitsTextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputBitsTextAreaKeyPressed
        if (!inputBitsTextArea.getText().isEmpty()) 
            if (inputBitsTextArea.getText()
                    .charAt(inputBitsTextArea.getText().length()-1) != '1' 
                    && inputBitsTextArea.getText()
                            .charAt(inputBitsTextArea.getText().length()-1) != '0') 
            {
                String tmp = inputBitsTextArea.getText()
                        .substring(0,inputBitsTextArea.getText().length()-1);
                inputBitsTextArea.setText(tmp);

                JOptionPane.showMessageDialog(null,
                            "You are trying to enter a valye different than '0' or "
                                    + "'1'. Please try again using only "
                                    + "'1's and '0's.", 
                            "You've done goofed!", JOptionPane.INFORMATION_MESSAGE);
            }
    }//GEN-LAST:event_inputBitsTextAreaKeyPressed

    // Block Start button if there is no text to be encrypted:
    private void inputBitsTextAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputBitsTextAreaKeyReleased
        if (inputBitsTextArea.getText()
                .charAt(inputBitsTextArea.getText().length()-1) != '1' 
                    && inputBitsTextArea.getText()
                            .charAt(inputBitsTextArea
                                    .getText().length()-1) != '0')
            {
                JOptionPane.showMessageDialog(null,
                        "You're trying to enter something other than '1' or '0'."
                            + " Please try again using only '1's and '0's.", 
                        "You've done goofed!", JOptionPane.INFORMATION_MESSAGE);
                
                inputBitsTextArea.setText(inputBitsTextArea.getText()
                        .substring(0,inputBitsTextArea.getText().length()-1));
            }
        if (inputBitsTextArea.getText().isEmpty())
            startBtn.setEnabled(false);
        else
            startBtn.setEnabled(true);
    }//GEN-LAST:event_inputBitsTextAreaKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Windows look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(A5_1SimulationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(A5_1SimulationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(A5_1SimulationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(A5_1SimulationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new A5_1SimulationFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bigRegBitTextField;
    private javax.swing.JTextField bigRegTextField;
    private javax.swing.JTextField currentDataTextField;
    private javax.swing.JTextArea inputBitsTextArea;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField majorityVoteTextField;
    private javax.swing.JTextField middleRegBitTextField;
    private javax.swing.JTextField middleRegTextField;
    private javax.swing.JTextArea outputBitsTextArea;
    private javax.swing.JTextField simulationKeyTextField;
    private javax.swing.JTextField smallRegBitTextField;
    private javax.swing.JTextField smallRegTextField;
    private javax.swing.JButton startBtn;
    private javax.swing.JButton stopBtn;
    // End of variables declaration//GEN-END:variables
}
